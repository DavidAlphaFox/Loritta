package net.perfectdreams.loritta.morenitta.interactions.vanilla.`fun`.text

import net.perfectdreams.loritta.cinnamon.discord.interactions.cleanUpForOutput
import net.perfectdreams.loritta.cinnamon.discord.interactions.commands.styled
import net.perfectdreams.loritta.morenitta.interactions.UnleashedContext
import net.perfectdreams.loritta.morenitta.interactions.commands.LegacyMessageCommandContext
import net.perfectdreams.loritta.morenitta.interactions.commands.LorittaLegacyMessageCommandExecutor
import net.perfectdreams.loritta.morenitta.interactions.commands.LorittaSlashCommandExecutor
import net.perfectdreams.loritta.morenitta.interactions.commands.SlashCommandArguments
import net.perfectdreams.loritta.morenitta.interactions.commands.options.ApplicationCommandOptions
import net.perfectdreams.loritta.morenitta.interactions.commands.options.OptionReference
import kotlin.collections.component1
import kotlin.collections.component2
import kotlin.collections.iterator

class TextVemDeZapExecutor: LorittaSlashCommandExecutor(), LorittaLegacyMessageCommandExecutor {
    class Options : ApplicationCommandOptions() {
        val mood = string("mood", I18N_PREFIX.Options.Mood.Text) {
            choice(I18N_PREFIX.Options.Mood.Choice.Happy, "happy")
            choice(I18N_PREFIX.Options.Mood.Choice.Angry, "angry")
            choice(I18N_PREFIX.Options.Mood.Choice.Sassy, "sassy")
            choice(I18N_PREFIX.Options.Mood.Choice.Sad, "sad")
            choice(I18N_PREFIX.Options.Mood.Choice.Sick, "sick")
        }

        val level = string("level", I18N_PREFIX.Options.Level.Text) {
            choice(I18N_PREFIX.Options.Level.Choice.Level1, "0")
            choice(I18N_PREFIX.Options.Level.Choice.Level2, "1")
            choice(I18N_PREFIX.Options.Level.Choice.Level3, "2")
            choice(I18N_PREFIX.Options.Level.Choice.Level4, "3")
            choice(I18N_PREFIX.Options.Level.Choice.Level5, "4")
        }

        val text = string("text", I18N_PREFIX.Options.Text)
    }

    override val options: Options = Options()

    override suspend fun execute(
        context: UnleashedContext,
        args: SlashCommandArguments
    ) {
        val mood = ZapZapMood.valueOf(args[options.mood].uppercase())
        val level = args[options.level].toLong()
        val split = cleanUpForOutput(context, args[options.text]).split(" ")

        var output = ""

        for (word in split) {
            val lowerCaseWord = word.lowercase()
            output += "$word "
            var addedEmoji = false

            for ((match, emojis) in fullMatch) {
                if (lowerCaseWord == match) {
                    output += "${emojis.random()} "
                    addedEmoji = true
                }
            }

            for ((match, emojis) in partialMatchAny) {
                if (lowerCaseWord.contains(match, true)) {
                    output += "${emojis.random()} "
                    addedEmoji = true
                }
            }

            for ((match, emojis) in partialMatchPrefix) {
                if (lowerCaseWord.startsWith(match, true)) {
                    output += "${emojis.random()} "
                    addedEmoji = true
                }
            }

            if (!addedEmoji) { // Se n√≥s ainda n√£o adicionamos nenhum emoji na palavra...
                // Para fazer um aleat√≥rio baseado no n√≠vel... quanto maior o n√≠vel = mais chance de aparecer emojos
                val upperBound = (5 - level) + 3
                val randomInteger = context.loritta.random.nextLong(upperBound)

                if (randomInteger == 0L) {
                    val moodEmojis = when (mood) {
                        ZapZapMood.HAPPY -> happyEmojis
                        ZapZapMood.ANGRY -> angryEmojis
                        ZapZapMood.SASSY -> sassyEmojis
                        ZapZapMood.SAD -> sadEmojis
                        ZapZapMood.SICK -> sickEmojis
                    }

                    // E quanto maior o n√≠vel, maiores as chances de aparecer mais emojis do lado da palavra
                    val addEmojis = context.loritta.random.nextLong(1, level + 2)

                    for (i in 0 until addEmojis) {
                        output += "${moodEmojis.random()} "
                    }
                }
            }
        }

        context.reply(ephemeral = false) {
            styled(
                output,
                "‚úç"
            )
        }
    }

    override suspend fun convertToInteractionsArguments(
        context: LegacyMessageCommandContext,
        args: List<String>
    ): Map<OptionReference<*>, Any?>? {
        if (args.size < 2) return null

        return mapOf(
            options.mood to args[0],
            options.level to args[1],
            options.text to args.drop(2).joinToString(" ")
        )
    }

    companion object {
        val I18N_PREFIX = TextTransformCommand.I18N_PREFIX.Vemdezap

        val happyEmojis =
            listOf("üòÄ", "üòÅ", "üòÇ", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä", "üòã", "üòé", "‚ò∫", "üòõ", "üòú", "üòù", "üëå")
        val angryEmojis = listOf("üò§", "üò§üí¶", "üòñ", "üôÅ", "üò©", "üò¶", "üò°", "ü§¨", "üí£", "üí¢", "‚úãüõë", "‚ò†")
        val sadEmojis = listOf("‚òπ", "üôÅ", "üòñ", "üòû", "üòü", "üò¢", "üò≠", "üò≠", "üò≠", "üò©", "üòø")
        val sassyEmojis = listOf("üòâ", "üòé", "üòã", "üòò", "üòè", "üòú", "üòà", "üòª", "üôä", "üëâüëå", "üòº")
        val sickEmojis = listOf("üò∑", "ü§í", "ü§ï", "ü§¢", "ü§Æ", "ü§ß")

        enum class ZapZapMood {
            HAPPY,
            ANGRY,
            SASSY,
            SAD,
            SICK
        }

        val fullMatch = mapOf(
            "100" to listOf("üíØ"),
            "alface" to listOf("ü•ó"),
            "alvo" to listOf("üéØ"),
            "amo" to listOf("üòç", "üòª", "üòò", "üòó", "üòô", "üòö", "üíò	", "‚ù§", "üíì", "üíï", "üíñ", "üíñ"),
            "amor" to listOf("üòç", "üòª", "üòò", "üòó", "üòô", "üòö", "üíò	", "‚ù§", "üíì", "üíï", "üíñ", "üíñ"),
            "ap" to listOf("üè¢"),
            "ape" to listOf("üè¢"),
            "apice" to listOf("üîù", "üèî", "‚õ∞", "üóª"),
            "arma" to listOf("üî´", "üî™", "üí£üí•"),
            "avalanche" to listOf("üèî", "‚ùÑ", "‚òÉ"),
            "banda" to listOf("üé∑", "üé∏", "üéπ", "üé∫", "üéª", "ü•Å", "üéº", "üéµ", "üé∂", "üé§"),
            "bandas" to listOf("üé∑", "üé∏", "üéπ", "üé∫", "üéª", "ü•Å", "üéº", "üéµ", "üé∂", "üé§"),
            "banheira" to listOf("üõÅ"),
            "banheiro" to listOf("üöΩ"),
            "banho" to listOf("üöø", "üõÅ", "üßñ‚Äç‚ôÇÔ∏è", "üßñ‚Äç‚ôÄÔ∏è"),
            "bar" to listOf("üç∫", "üçª", "ü•É", "üçæ", "ü§Æ"),
            "beber" to listOf("üç∫", "üçª", "ü•É", "üçæ", "ü§Æ"),
            "bem" to listOf("‚ò∫"),
            "boa" to listOf("ü§ô"),
            "bolsa" to listOf("üëú", "üëù"),
            "bravo" to listOf("üò§", "üò§üí¶", "üòñ", "üôÅ", "üò©", "üò¶", "üò°", "ü§¨", "üí£", "üí¢", "‚úãüõë", "‚ò†"),
            "bumbum" to listOf("üòÆ", "üòè"),
            "carro" to listOf("üöê", "üöó"),
            "casa" to listOf("üòã"),
            "casal" to listOf("üíë"),
            "caso" to listOf("üíë"),
            "celular" to listOf("üì±"),
            "cerebro" to listOf("üß†", "üí≠"),
            "chama" to listOf("üìû", "‚òé"),
            "chef" to listOf("üë®‚Äçüç≥", "üë©‚Äçüç≥"),
            "ciencia" to listOf("üë©‚Äçüî¨", "üë®‚Äçüî¨", "‚öó", "üî¨", "üî≠", "üì°"),
            "classe" to listOf("üìö", "üìò"),
            "consciencia" to listOf("üß†", "üí≠"),
            "coracao" to listOf("üíò	", "‚ù§", "üíì", "üíï", "üíñ", "üíñ"),
            "corra" to listOf("üèÉ"),
            "corre" to listOf("üèÉ"),
            "croissant" to listOf("ü•ê"),
            "dado" to listOf("üé≤"),
            "data" to listOf("üìÖ", "üóì"),
            "dinheiro" to listOf("üí≥", "üíµ", "üí∞", "üí≤"),
            "embuste" to listOf("üò≠", "ü§¢", "üí•", "üòò", "üòú"),
            "escola" to listOf("üë®‚Äçüéì", "üë©‚Äçüéì", "üìö", "üìò", "üè´"),
            "faculdade" to listOf("üë®‚Äçüéì", "üë©‚Äçüéì", "üìö", "üìò"),
            "feio" to listOf("üòõ"),
            "feia" to listOf("üòõ"),
            "fora" to listOf("üëâ"),
            "fim" to listOf("üôÖ‚Äç‚ôÇÔ∏è", "üôÖ‚Äç‚ôÄÔ∏è"),
            "j√°" to listOf("‚è∞"),
            "internet" to listOf("üåê"),
            "madame" to listOf("üåπ"),
            "marcial" to listOf("üí™"),
            "marciais" to listOf("üí™"),
            "mente" to listOf("üß†", "üí≠"),
            "moca" to listOf("üåπ"),
            "mundo" to listOf("üåç"),
            "nada" to listOf("üòÆ"),
            "nao" to listOf("‚õî", "üö´", "üõë", "‚úã", "‚úãüõë", "‚ö†"),
            "oi" to listOf("üòè", "üòâ"),
            "ok" to listOf("üëå"),
            "papo" to listOf("üí¨"),
            "parabens" to listOf("üéà", "üéâ", "üéä", "üëè"),
            "pc" to listOf("üíª", "üñ•", "üñ±‚å®", "üíæ", "üë®‚Äçüíª", "üë©‚Äçüíª"),
            "planeta" to listOf("üåç"),
            "preco" to listOf("üí≥", "üíµ", "üí∞", "üí≤"),
            "princesa" to listOf("üë∏"),
            "principe" to listOf("ü§¥"),
            "quer" to listOf("üòè"),
            "raio" to listOf("‚ö°"),
            "ri" to listOf("üòÖ", "üòÇ", "ü§£"),
            "rir" to listOf("üòÖ", "üòÇ", "ü§£"),
            "risada" to listOf("üòÖ", "üòÇ", "ü§£"),
            "riso" to listOf("üòÖ", "üòÇ", "ü§£"),
            "rola" to listOf("üòí", "üòù", "üëâüëå"),
            "sai" to listOf("üö´", "‚õî"),
            "saliente" to listOf("üòã"),
            "secreto" to listOf("üïµÔ∏è‚Äç"),
            "sera" to listOf("ü§®", "ü§î", "üßê"),
            "sexo" to listOf("üòÜ", "üëâüëå"),
            "soco" to listOf("ü•ä"),
            "sono" to listOf("üí§"),
            "sos" to listOf("üÜò"),
            "susto" to listOf("üò±", "üéÉ"),
            "terra" to listOf("üåç"),
            "tesao" to listOf("üåö"),
            "tiro" to listOf("üî´"),
            "tomar" to listOf("üç∫", "üçª"),
            "topo" to listOf("üîù", "üèî", "‚õ∞", "üóª"),
            "ve" to listOf("üëÄ", "üëÅ"),
            "vem" to listOf("üöê", "üèé"),
            "ver" to listOf("üëÄüëÄ", "üëÄ"),
            "voce" to listOf("üëâ"),
            "zumbi" to listOf("üßü‚Äç‚ôÇÔ∏è", "üßü‚Äç‚ôÄÔ∏è"),
            /* Abrevia√ß√µes/Girias */
            "aff" to listOf("üôÑ"),
            "bb" to listOf("üë∂", "üòç", "üòÇ", "üòú", "üíò"),
            "caraio" to listOf("üòú", "üò©", "üòñ", "‚òπ", "üòõ", "üòè", "üòû"),
            "caralho" to listOf("üòú", "üò©", "üòñ", "‚òπ", "üòõ", "üòè", "üòû"),
            "escroto" to listOf("üë∫", "üëπ", "üëø"),
            "lol" to listOf("üòÖ", "üòÇ", "ü§£"),
            "mozao" to listOf("üíò", "‚ù§", "üíì", "üíï", "üíñ", "üíñ"),
            "top" to listOf("üòÇüëå", "üëå", "üîù", "ü§©"),
            "topper" to listOf("üòÇüëå", "üëå", "üîù", "ü§©"),
            "topperson" to listOf("üòÇüëå", "üëå", "üîù", "üòõ", "ü§©"),
            "uau" to listOf("üòã"),
            "wow" to listOf("üòã"),
            /* Comidas */
            "abacate" to listOf("ü•ë"),
            "amendoim" to listOf("ü•ú"),
            "bacon" to listOf("ü•ì"),
            "batata" to listOf("üçü", "ü•î"),
            "berinjela" to listOf("üçÜ"),
            "biscoito" to listOf("üç™"),
            "bolacha" to listOf("üç™"),
            "brocolis" to listOf("ü•¶"),
            "castanha" to listOf("üå∞"),
            "cenoura" to listOf("ü•ï"),
            "cerveja" to listOf("üç∫", "üçª"),
            "cogumelo" to listOf("üçÑ"),
            "doce" to listOf("üç¶", "üçß", "üç®", "üç©", "üç™", "üéÇ", "üç∞", "ü•ß", "üç´", "üç¨", "üç≠", "üçÆ", "üçØ"),
            "ovo" to listOf("ü•ö", "üç≥"),
            "pepino" to listOf("ü•í"),
            "pizza" to listOf("üçï"),
            "pretzel" to listOf("ü•®"),
            "salada" to listOf("ü•ó"),
            "sanduiche" to listOf("ü•™"),
            "sushi" to listOf("üç£", "üçô", "üç±", "üçò"),
            "trato" to listOf("ü§ù"),
            /* Empresas */
            "aliexpress" to listOf("üá®üá≥"),
            "donalds" to listOf("üçîüçü"),
            "globo" to listOf("üåç"),
            "mcdonalds" to listOf("üçîüçü"),
            "sedex" to listOf("üì¶", "üì¨"),
            /* Esportes */
            "basquete" to listOf("üèÄ"),
            "futebol" to listOf("‚öΩ"),
            "volei" to listOf("üèê"),
            /* Signos */
            "aries" to listOf("‚ôà"),
            "touro" to listOf("‚ôâ"),
            "gemeos" to listOf("‚ôä"),
            "cancer" to listOf("‚ôã"),
            "leao" to listOf("‚ôå"),
            "virgem" to listOf("‚ôç"),
            "libra" to listOf("‚ôé"),
            "escorpiao" to listOf("‚ôè"),
            "sagitario" to listOf("‚ôê"),
            "capricornio" to listOf("‚ôë"),
            "aquario" to listOf("‚ôí"),
            "peixes" to listOf("‚ôì"),
            /* Personagens */
            "bolsonaro" to listOf("üö´üè≥Ô∏è‚Äçüåà", "üî´"),
            "doria" to listOf("üí©"),
            "lula" to listOf("üí∞", "üè¢", "ü¶ë"),
            "mario" to listOf("üçÑ"),
            "neymar" to listOf("üòç"),
            "noel" to listOf("üéÖ"),
            "pabblo" to listOf("üë©", "üè≥Ô∏è‚Äçüåàüë©"),
            "pabbllo" to listOf("üë©", "üè≥Ô∏è‚Äçüåàüë©"),
            "pabllo" to listOf("üë©", "üè≥Ô∏è‚Äçüåàüë©"),
            "temer" to listOf("üßõ‚Äç‚ôÇÔ∏è", "üö´"),
            "vittar" to listOf("üë©", "üè≥Ô∏è‚Äçüåàüë©")
        )

        val partialMatchAny = mapOf(
            "brasil" to listOf("üáßüá∑"),
            "cabel" to listOf("üíá‚Äç‚ôÇÔ∏è", "üíá‚Äç‚ôÄÔ∏è"),
            "deus" to listOf("üëº", "üòá", "üôè", "üôèüôè"),
            "doid" to listOf("ü§™"),
            "fuma" to listOf("üö¨", "üö≠"),
            "kk" to listOf("üòÖ", "üòÇ", "ü§£"),
            "piment" to listOf("üå∂"),
            "mort" to listOf("‚ò†", "üíÄ", "‚ö∞", "üëª"),
            "zap" to listOf("üìû", "‚ô£", "üì±")
        )

        val partialMatchPrefix = mapOf(
            "abrac" to listOf("ü§ó"),
            "alema" to listOf("üá©üá™"),
            "alun" to listOf("üë®‚Äçüéì", "üë©‚Äçüéì"),
            "anjo" to listOf("üòá"),
            "armad" to listOf("üî´", "üî™", "üí£üí•"),
            "arte" to listOf("üñå"),
            "assust" to listOf("üò±", "üéÉ"),
            "ataq" to listOf("üí£", "üî´"),
            "atenc" to listOf("üëÄ"),
            "bunda" to listOf("üòÆ", "üòè"),
            "calad" to listOf("ü§ê"),
            "casad" to listOf("üíè", "üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®", "üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®"),
            "chave" to listOf("üîë", "üóù"),
            "cheir" to listOf("üëÉ"),
            "combat" to listOf("üí£", "üî´", "üéñ", "üí™"),
            "computa" to listOf("üíª", "üñ•", "üñ±‚å®", "üíæ", "üë®‚Äçüíª", "üë©‚Äçüíª"),
            "comun" to listOf("üá∑üá∫"),
            "combin" to listOf("ü§ù"),
            "condec" to listOf("üéñ"),
            "conhec" to listOf("üß†", "üí≠"),
            "content" to listOf("üòÄ", "üòÅ", "üòÉ", "üòÑ", "üòä", "üôÇ", "‚ò∫"),
            "correr" to listOf("üèÉ"),
            "corrid" to listOf("üèÉ"),
            "danca" to listOf("üíÉ", "üï∫"),
            "dance" to listOf("üíÉ", "üï∫"),
            "desculpa" to listOf("üòÖ"),
            "docei" to listOf("üç¶", "üçß", "üç®", "üç©", "üç™", "üéÇ", "üç∞", "ü•ß", "üç´", "üç¨", "üç≠", "üçÆ", "üçØ"),
            "doen" to listOf("üò∑", "ü§í", "ü§ï", "ü§¢", "ü§Æ", "ü§ß"),
            "enjo" to listOf("ü§¢", "ü§Æ"),
            "espia" to listOf("üïµÔ∏è‚Äç"),
            "espio" to listOf("üïµÔ∏è‚Äç"),
            "europ" to listOf("üá™üá∫"),
            "exercito" to listOf("üéñ"),
            "familia" to listOf("üë®‚Äçüë©‚Äçüëß‚Äçüë¶"),
            "feli" to listOf("üòÄ", "üòÅ", "üòÉ", "üòÑ", "üòä", "üôÇ", "‚ò∫"),
            "fest" to listOf("üéÜ", "üéá", "‚ú®", "üéà", "üéâ", "üéä"),
            "flor" to listOf("üåπ"),
            "foga" to listOf("üî•"),
            "fogo" to listOf("üî•"),
            "fogu" to listOf("üî•"),
            "gat" to listOf("üòè", "üëå", "üòΩ", "üòª"),
            "goz" to listOf("üí¶"),
            "gostos" to listOf("üòà", "üòú"),
            "guerr" to listOf("üí£", "üî´", "üéñ"),
            "hora" to listOf("‚åö", "‚è≤", "üïõ"),
            "hospita" to listOf("üë®‚Äç‚öïÔ∏è", "‚öï", "üöë"),
            "imediat" to listOf("‚åö", "‚è≥", "üïõ"),
            "invest" to listOf("üí≥", "üíµ", "üí∞", "üí≤"),
            "justic" to listOf("‚öñ", "üë®‚Äç‚öñÔ∏è"),
            "louc" to listOf("ü§™", "üò©", "üò¢", "üò∞"),
            "louv" to listOf("üëº", "üòá", "üôè", "üôèüôè"),
            "mao" to listOf("üñê", "üñê"),
            "maneir" to listOf("üîù"),
            "mentir" to listOf("ü§•", "ü§´"),
            "militar" to listOf("üéñ"),
            "miste" to listOf("üïµÔ∏è‚Äç"),
            "monitor" to listOf("üñ•"),
            "morre" to listOf("‚ò†", "üíÄ", "‚ö∞", "üëª"),
            "morri" to listOf("‚ò†", "üíÄ", "‚ö∞", "üëª"),
            "musica" to listOf("üé∑", "üé∏", "üéπ", "üé∫", "üéª", "ü•Å", "üéº", "üéµ", "üé∂", "üé§"),
            "olh" to listOf("üëÄ"),
            "ouv" to listOf("üëÇ"),
            "palavr" to listOf("‚úè", "‚úí", "üñã", "üìù", "üí¨"),
            "palhac" to listOf("ü§°"),
            "palma" to listOf("üëè"),
            "paulista" to listOf("üè≥", "üåà"),
            "patet" to listOf("üò£"),
            "patriot" to listOf("üáßüá∑"),
            "pens" to listOf("üß†", "üí≠"),
            "pesa" to listOf("üèã"),
            "pipo" to listOf("üçø"),
            "pistol" to listOf("üî´"),
            "pula" to listOf("üèÉ"),
            "pule" to listOf("üèÉ"),
            "querid" to listOf("‚ò∫", "ü§ó"),
            "quiet" to listOf("ü§ê"),
            "raiv" to listOf("‚ö°", "üò§", "üò§üí¶", "üòñ", "üôÅ", "üò©", "üò¶", "üò°", "ü§¨", "üí£", "üí¢", "‚úãüõë", "‚ò†"),
            "rock" to listOf("ü§ü"),
            "safad" to listOf("üòâ"),
            "saudade" to listOf("üò¢"),
            "segred" to listOf("üïµÔ∏è‚Äç"),
            "sumid" to listOf("üòç"),
            "surpre" to listOf("üòÆ"),
            "telefo" to listOf("üì±", "üìû", "‚òé"),
            "text" to listOf("‚úè", "‚úí", "üñã", "üìù", "üí¨"),
            "transa" to listOf("üëâüëå"),
            "transe" to listOf("üëâüëå"),
            "trist" to listOf("‚òπ", "üôÅ", "üòñ", "üòû", "üòü", "üò¢", "üò≠", "üò≠", "üò≠", "üò©", "üòø"),
            "vergonh" to listOf("üò≥"),
            "vist" to listOf("üëÄ"),
            "whisk" to listOf("ü•É"),
            /* Abrevia√ß√µes/Girias */
            "bucet" to listOf("üòú", "üòò", "üòü"),
            "fod" to listOf("üëâüëå", "üîû"),
            "fud" to listOf("üëâüëå", "üîû"),
            "haha" to listOf("üòÖ", "üòÇ", "ü§£"),
            "hehe" to listOf("üòâ", "üòé", "üòã", "üòè", "üòú", "üòà", "üôä", "üòº"),
            "mackenz" to listOf("üê¥"),
            "merd" to listOf("üí©"),
            "nude" to listOf("üôä", "üòº", "üòè"),
            "print" to listOf("üì±"),
            "put" to listOf("üò§", "üò§üí¶", "üòñ", "üôÅ", "üò©", "üò¶", "üò°", "ü§¨", "üí£", "üí¢", "‚úãüõë", "‚ò†"),
            "vampir" to listOf("ü¶á"),
            /* Animais */
            "cachorr" to listOf("üê∂"),
            "morceg" to listOf("ü¶á"),
            /* Comidas */
            "hamburger" to listOf("üçî"),
            "hamburguer" to listOf("üçî"),
            "pao" to listOf("üçû", "ü•ñ"),
            "panqueca" to listOf("ü•û"),
            "milh" to listOf("üåΩ"),
            /* Profiss√µes */
            "astronaut" to listOf("üë®‚ÄçüöÄ", "üë©‚ÄçüöÄ"),
            "bombeir" to listOf("üë©‚Äçüöí", "üë®‚Äçüöí"),
            "cienti" to listOf("üë©‚Äçüî¨", "üë®‚Äçüî¨", "‚öó", "üî¨", "üî≠", "üì°"),
            "cozinh" to listOf("üë®‚Äçüç≥", "üë©‚Äçüç≥"),
            "juiz" to listOf("üë®‚Äç‚öñÔ∏è", "üë©‚Äç‚öñÔ∏è", "‚öñ"),
            "medic" to listOf("üë®‚Äç‚öïÔ∏è", "üë©‚Äç‚öïÔ∏è", "‚öï"),
            "pilot" to listOf("üë®‚Äç‚úàÔ∏è", "üë©‚Äç‚úàÔ∏è"),
            "policia" to listOf("üö®", "üöî", "üöì", "üëÆ‚Äç‚ôÇÔ∏è", "üëÆ‚Äç‚ôÄÔ∏è", "üî´"),
            "professor" to listOf("üë®‚Äçüè´", "üë©‚Äçüè´"),
            /* Signos */
            "arian" to listOf("‚ôà"),
            "taurin" to listOf("‚ôâ"),
            "geminian" to listOf("‚ôä"),
            "cancerian" to listOf("‚ôã"),
            "leonin" to listOf("‚ôå"),
            "virginian" to listOf("‚ôç"),
            "librian" to listOf("‚ôé"),
            "escorpian" to listOf("‚ôè"),
            "sagitario" to listOf("‚ôê"),
            "capricornian" to listOf("‚ôë"),
            "aquarian" to listOf("‚ôí"),
            "piscian" to listOf("‚ôì")
        )
    }
}